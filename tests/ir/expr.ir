// floating points
let x = 1.2
let y = 2.0
assert (= (- x) -1.2)
assert (= (+ x y) 3.2)
assert (= (- x y) -0.8)
assert (= (* x y) 2.4)
assert (= (/ x y) 0.6)
assert (= (% y x) 0.8)
assert (= (< x y) true)

// integers
x = 3i
y = 5i
assert (= (- x) -3i)
assert (= (+ x y) 8i)
assert (= (- x y) -2i)
assert (= (* x y) 15i)
assert (= (/ x y) 0i)
assert (= (% y x) 2i)
assert (= (< y x) false)
assert (= (& x y) 1i)
assert (= (| x y) 7i)
assert (= (^ x y) 6i)
assert (= (<< x y) 96i)
assert (= (>> 16i 2i) 4i)
assert (= (>>> -1i 28i) 15i)

// strings
x = "abc"
y = "def"
assert (= (+ x y) "abcdef")
assert (= (< x y) true)

// booleans
assert (= true true)
assert (= false false)
assert (= (= true false) false)
assert (&& true true)
assert (! (&& false true))
assert (! (&& true false))
assert (! (&& false false))
assert (|| true true)
assert (|| true false)
assert (|| false true)
assert (! (|| false false))
assert (^^ true false)
assert (^^ false true)
assert (! (^^ true true))
assert (! (^^ false false))

// undefined
assert (= undefined undefined)

// null
assert (= null null)

// identifiers
x = 1
let z = x
assert (= z 1)

// property reads
let obj = (new Object("x" -> 1, "y" -> 2))
let p = "x"
let res = obj[p]
assert (= res 1)

// property existences
let obj = (new Object("x" -> 1, "y" -> 2))
assert (! (= absent obj.x))
assert (= absent obj["z"])

// typeof
assert (= (typeof 1) "Number")
assert (= (typeof true) "Boolean")
assert (= (typeof undefined) "Undefined")
assert (= (typeof null) "Null")
obj = (new Object)
assert (= (typeof obj) "Object")
let a = (new A)
assert (= (typeof a) "A")

// to number
let x = "123"
let y = "-1"
assert (= (convert x str2num) 123)
assert (= (convert y str2num) -1)
