[32mMultiplicativeExpression1Evaluation0[0m
[32m- Inst: 58 / 58 (100.00%)[0m
[33m- Cond: 7944 / 22 (36109.09%)[0m
[32m+ 501   [-]   : { ... }[0m
[32m+ 502   [-]   : access __x0__ = (MultiplicativeExpression "Evaluation")[0m
[32m+ 503   [-]   : let left = __x0__[0m
[32m+ 504   [-]   : app __x1__ = (GetValue left)[0m
[32m+ 505   [[32mT[0m/[32mT[0m[32m]: if (is-completion __x1__) ... else ...[0m
[32m+ 506   [[32mT[0m/[32mT[0m[32m]: if (= __x1__["Type"] CONST_normal) ... else ...[0m
[32m+ 507   [-]   : __x1__ = __x1__["Value"][0m
[32m+ 508   [-]   : return __x1__[0m
[32m+ 509   [-]   : {}[0m
[32m+ 510   [-]   : let leftValue = __x1__[0m
[32m+ 511   [-]   : access __x2__ = (ExponentiationExpression "Evaluation")[0m
[32m+ 512   [-]   : let right = __x2__[0m
[32m+ 513   [-]   : app __x3__ = (GetValue right)[0m
[32m+ 514   [[32mT[0m/[32mT[0m[32m]: if (is-completion __x3__) ... else ...[0m
[32m+ 515   [[32mT[0m/[32mT[0m[32m]: if (= __x3__["Type"] CONST_normal) ... else ...[0m
[32m+ 516   [-]   : __x3__ = __x3__["Value"][0m
[32m+ 517   [-]   : return __x3__[0m
[32m+ 518   [-]   : {}[0m
[32m+ 519   [-]   : let rightValue = __x3__[0m
[32m+ 520   [-]   : app __x4__ = (ToNumeric leftValue)[0m
[32m+ 521   [[32mT[0m/[32mT[0m[32m]: if (is-completion __x4__) ... else ...[0m
[32m+ 522   [[32mT[0m/[32mT[0m[32m]: if (= __x4__["Type"] CONST_normal) ... else ...[0m
[32m+ 523   [-]   : __x4__ = __x4__["Value"][0m
[32m+ 524   [-]   : return __x4__[0m
[32m+ 525   [-]   : {}[0m
[32m+ 526   [-]   : let lnum = __x4__[0m
[32m+ 527   [-]   : app __x5__ = (ToNumeric rightValue)[0m
[32m+ 528   [[32mT[0m/[32mT[0m[32m]: if (is-completion __x5__) ... else ...[0m
[32m+ 529   [[32mT[0m/[32mT[0m[32m]: if (= __x5__["Type"] CONST_normal) ... else ...[0m
[32m+ 530   [-]   : __x5__ = __x5__["Value"][0m
[32m+ 531   [-]   : return __x5__[0m
[32m+ 532   [-]   : {}[0m
[32m+ 533   [-]   : let rnum = __x5__[0m
[32m+ 534   [-]   : app __x6__ = (Type lnum)[0m
[32m+ 535   [-]   : app __x7__ = (Type rnum)[0m
[32m+ 536   [[32mT[0m/[32mT[0m[32m]: if (! (= __x6__ __x7__)) ... else ...[0m
[32m+ 537   [-]   : { ... }[0m
[32m+ 538   [-]   : app __x8__ = (ThrowCompletion (new OrdinaryObject("Prototype" -> INTRINSIC_TypeErrorPrototype, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))))[0m
[32m+ 539   [-]   : return __x8__[0m
[32m+ 540   [-]   : {}[0m
[32m+ 541   [-]   : app __x9__ = (Type lnum)[0m
[32m+ 542   [-]   : let T = __x9__[0m
[32m+ 543   [[32mT[0m/[32mT[0m[32m]: if (= MultiplicativeOperator "*") ... else ...[0m
[32m+ 544   [-]   : { ... }[0m
[32m+ 545   [-]   : app result = (PRIMITIVES[T]["multiply"] lnum rnum)[0m
[32m+ 546   [-]   : app wrapped = (WrapCompletion result)[0m
[32m+ 547   [-]   : return wrapped[0m
[32m+ 548   [-]   : {}[0m
[32m+ 549   [[32mT[0m/[32mT[0m[32m]: if (= MultiplicativeOperator "/") ... else ...[0m
[32m+ 550   [-]   : { ... }[0m
[32m+ 551   [-]   : app result = (PRIMITIVES[T]["divide"] lnum rnum)[0m
[32m+ 552   [-]   : app wrapped = (WrapCompletion result)[0m
[32m+ 553   [-]   : return wrapped[0m
[32m+ 554   [-]   : { ... }[0m
[32m+ 555   [-]   : assert (= MultiplicativeOperator "%")[0m
[32m+ 556   [-]   : app result = (PRIMITIVES[T]["remainder"] lnum rnum)[0m
[32m+ 557   [-]   : app wrapped = (WrapCompletion result)[0m
[32m+ 558   [-]   : return wrapped[0m
