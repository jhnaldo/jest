[32mOrdinaryGetOwnProperty[0m
[32m- Inst: 21 / 21 (100.00%)[0m
[33m- Cond: 7944 / 4 (198600.00%)[0m
[32m+ 24380 [-]   : { ... }[0m
[32m+ 24381 [-]   : app __x0__ = (IsPropertyKey P)[0m
[32m+ 24382 [-]   : assert (= __x0__ true)[0m
[32m+ 24383 [[32mT[0m/[32mT[0m[32m]: if (= O["SubMap"][P] absent) ... else ...[0m
[32m+ 24384 [-]   : return undefined[0m
[32m+ 24385 [-]   : {}[0m
[32m+ 24386 [-]   : let D = (new PropertyDescriptor("SubMap" -> (new SubMap())))[0m
[32m+ 24387 [-]   : let X = O["SubMap"][P][0m
[32m+ 24388 [-]   : app __x1__ = (IsDataDescriptor X)[0m
[32m+ 24389 [[32mT[0m/[32mT[0m[32m]: if __x1__ ... else ...[0m
[32m+ 24390 [-]   : { ... }[0m
[32m+ 24391 [-]   : D["Value"] = X["Value"][0m
[32m+ 24392 [-]   : D["Writable"] = X["Writable"][0m
[32m+ 24393 [-]   : { ... }[0m
[32m+ 24394 [-]   : app __x2__ = (IsAccessorDescriptor X)[0m
[32m+ 24395 [-]   : assert __x2__[0m
[32m+ 24396 [-]   : D["Get"] = X["Get"][0m
[32m+ 24397 [-]   : D["Set"] = X["Set"][0m
[32m+ 24398 [-]   : D["Enumerable"] = X["Enumerable"][0m
[32m+ 24399 [-]   : D["Configurable"] = X["Configurable"][0m
[32m+ 24400 [-]   : return D[0m
