[33mGLOBALDOTparseFloat[0m
[33m- Inst: 2 / 24 (8.33%)[0m
[31m- Cond: 0 / 8 (0.00%)[0m
[32m+ 19342 [-]   : { ... }[0m
[32m+ 19343 [-]   : ??? "GLOBAL.parseFloat"[0m
[31m- 19344 [-]   : app __x0__ = (GetArgument argumentsList 0i)[0m
[31m- 19345 [-]   : let string = __x0__[0m
[31m- 19346 [-]   : app __x1__ = (ToString string)[0m
[31m- 19347 [-]   : if (is-completion __x1__) ... else ...[0m
[31m- 19348 [-]   : if (= __x1__["Type"] CONST_normal) ... else ...[0m
[31m- 19349 [-]   : __x1__ = __x1__["Value"][0m
[31m- 19350 [-]   : return __x1__[0m
[31m- 19351 [-]   : {}[0m
[31m- 19352 [-]   : let inputString = __x1__[0m
[31m- 19353 [-]   : app __x2__ = (TrimString inputString CONST_start)[0m
[31m- 19354 [-]   : if (is-completion __x2__) ... else ...[0m
[31m- 19355 [-]   : if (= __x2__["Type"] CONST_normal) ... else ...[0m
[31m- 19356 [-]   : __x2__ = __x2__["Value"][0m
[31m- 19357 [-]   : return __x2__[0m
[31m- 19358 [-]   : {}[0m
[31m- 19359 [-]   : let trimmedString = __x2__[0m
[31m- 19360 [-]   : !!! "If neither id:{trimmedString} nor any prefix of id:{trimmedString} satisfies the syntax of a nt:{StrDecimalLiteral} ( see 7 . 1 . 4 . 1 ) , return value:{NaN} ."[0m
[31m- 19361 [-]   : !!! "Etc"[0m
[31m- 19362 [-]   : access __x3__ = (numberString "MV")[0m
[31m- 19363 [-]   : let mathFloat = __x3__[0m
[31m- 19364 [-]   : !!! "Etc"[0m
[31m- 19365 [-]   : !!! "Etc"[0m
