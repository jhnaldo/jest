[33mOrdinaryOwnPropertyKeys[0m
[33m- Inst: 54 / 55 (98.18%)[0m
[33m- Cond: 18 / 20 (90.00%)[0m
[32m+ 24614 [-]   : { ... }[0m
[32m+ 24615 [-]   : let keys = (new [])[0m
[32m+ 24616 [-]   : let i = 0i[0m
[32m+ 24617 [-]   : let list = (map-keys O["SubMap"])[0m
[32m+ 24618 [-]   : let arrayIndexKeys = (new [])[0m
[32m+ 24619 [-]   : let stringKeys = (new [])[0m
[32m+ 24620 [-]   : let symbolKeys = (new [])[0m
[32m+ 24621 [-]   : len = list["length"][0m
[32m+ 24622 [[32mT[0m/[32mT[0m[32m]: while (< i len) { ... }[0m
[32m+ 24623 [-]   : { ... }[0m
[32m+ 24624 [-]   : let P = list[i][0m
[32m+ 24625 [-]   : app T = (Type P)[0m
[32m+ 24626 [[32mT[0m/[32mT[0m[32m]: if (= T "String") ... else ...[0m
[32m+ 24627 [-]   : { ... }[0m
[32m+ 24628 [-]   : app isArrayIndex = (IsArrayIndex P)[0m
[32m+ 24629 [[32mT[0m/[32mT[0m[32m]: if isArrayIndex ... else ...[0m
[32m+ 24630 [-]   : { ... }[0m
[32m+ 24631 [-]   : app n = (ToInteger P)[0m
[32m+ 24632 [[32mT[0m/[31mF[0m[32m]: if (is-completion n) ... else ...[0m
[32m+ 24633 [-]   : n = n["Value"][0m
[31m- 24634 [-]   : {}[0m
[32m+ 24635 [-]   : append n -> arrayIndexKeys[0m
[32m+ 24636 [-]   : append P -> stringKeys[0m
[32m+ 24637 [-]   : append P -> symbolKeys[0m
[32m+ 24638 [-]   : i = (+ i 1i)[0m
[32m+ 24639 [-]   : len = arrayIndexKeys["length"][0m
[32m+ 24640 [[32mT[0m/[32mT[0m[32m]: while (< 0i len) { ... }[0m
[32m+ 24641 [-]   : { ... }[0m
[32m+ 24642 [-]   : let min = 0i[0m
[32m+ 24643 [-]   : let j = 1i[0m
[32m+ 24644 [[32mT[0m/[32mT[0m[32m]: while (< j len) { ... }[0m
[32m+ 24645 [-]   : { ... }[0m
[32m+ 24646 [[32mT[0m/[32mT[0m[32m]: if (< arrayIndexKeys[j] arrayIndexKeys[min]) ... else ...[0m
[32m+ 24647 [-]   : min = j[0m
[32m+ 24648 [-]   : {}[0m
[32m+ 24649 [-]   : j = (+ j 1i)[0m
[32m+ 24650 [-]   : app P = (ToString (pop arrayIndexKeys min))[0m
[32m+ 24651 [[31mF[0m/[32mT[0m[32m]: if (is-completion P) ... else ...[0m
[32m+ 24652 [-]   : P = P["Value"][0m
[32m+ 24653 [-]   : {}[0m
[32m+ 24654 [-]   : append P -> keys[0m
[32m+ 24655 [-]   : len = (- len 1i)[0m
[32m+ 24656 [-]   : i = 0i[0m
[32m+ 24657 [-]   : len = stringKeys["length"][0m
[32m+ 24658 [[32mT[0m/[32mT[0m[32m]: while (< i len) { ... }[0m
[32m+ 24659 [-]   : { ... }[0m
[32m+ 24660 [-]   : append stringKeys[i] -> keys[0m
[32m+ 24661 [-]   : i = (+ i 1i)[0m
[32m+ 24662 [-]   : i = 0i[0m
[32m+ 24663 [-]   : len = symbolKeys["length"][0m
[32m+ 24664 [[32mT[0m/[32mT[0m[32m]: while (< i len) { ... }[0m
[32m+ 24665 [-]   : { ... }[0m
[32m+ 24666 [-]   : append symbolKeys[i] -> keys[0m
[32m+ 24667 [-]   : i = (+ i 1i)[0m
[32m+ 24668 [-]   : return keys[0m
