[33mToObject[0m
[33m- Inst: 62 / 73 (84.93%)[0m
[33m- Cond: 7944 / 36 (22066.67%)[0m
[32m+ 28271 [-]   : { ... }[0m
[32m+ 28272 [-]   : app atype = (Type argument)[0m
[32m+ 28273 [[32mT[0m/[32mT[0m[32m]: if (= atype "Undefined") ... else ...[0m
[32m+ 28274 [-]   : { ... }[0m
[32m+ 28275 [-]   : return (new Completion("Type" -> CONST_throw, "Value" -> (new OrdinaryObject("Prototype" -> INTRINSIC_TypeErrorPrototype, "Extensible" -> false, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))), "Target" -> CONST_empty))[0m
[32m+ 28276 [[32mT[0m/[32mT[0m[32m]: if (= atype "Null") ... else ...[0m
[32m+ 28277 [-]   : { ... }[0m
[32m+ 28278 [-]   : return (new Completion("Type" -> CONST_throw, "Value" -> (new OrdinaryObject("Prototype" -> INTRINSIC_TypeErrorPrototype, "Extensible" -> false, "ErrorData" -> undefined, "SubMap" -> (new SubMap()))), "Target" -> CONST_empty))[0m
[32m+ 28279 [[32mT[0m/[32mT[0m[32m]: if (= atype "Boolean") ... else ...[0m
[32m+ 28280 [-]   : { ... }[0m
[32m+ 28281 [-]   : let obj = (new OrdinaryObject("Prototype" -> INTRINSIC_BooleanPrototype, "Extensible" -> true))[0m
[32m+ 28282 [-]   : obj["BooleanData"] = argument[0m
[32m+ 28283 [-]   : obj["SubMap"] = (new SubMap())[0m
[32m+ 28284 [-]   : return obj[0m
[32m+ 28285 [[32mT[0m/[32mT[0m[32m]: if (= atype "Number") ... else ...[0m
[32m+ 28286 [-]   : { ... }[0m
[32m+ 28287 [-]   : let obj = (new OrdinaryObject("Prototype" -> INTRINSIC_NumberPrototype, "Extensible" -> true))[0m
[32m+ 28288 [-]   : obj["NumberData"] = argument[0m
[32m+ 28289 [-]   : obj["SubMap"] = (new SubMap())[0m
[32m+ 28290 [-]   : return obj[0m
[32m+ 28291 [[32mT[0m/[32mT[0m[32m]: if (= atype "String") ... else ...[0m
[32m+ 28292 [-]   : { ... }[0m
[32m+ 28293 [-]   : let obj = (new StringExoticObject("Prototype" -> INTRINSIC_StringPrototype, "Extensible" -> true))[0m
[32m+ 28294 [-]   : obj["StringData"] = argument[0m
[32m+ 28295 [[31mF[0m/[32mT[0m[32m]: if (= obj["HasProperty"] absent) ... else ...[0m
[31m- 28296 [-]   : obj["HasProperty"] = OrdinaryObjectDOTHasProperty[0m
[32m+ 28297 [-]   : {}[0m
[32m+ 28298 [[31mF[0m/[32mT[0m[32m]: if (= obj["DefineOwnProperty"] absent) ... else ...[0m
[31m- 28299 [-]   : obj["DefineOwnProperty"] = OrdinaryObjectDOTDefineOwnProperty[0m
[32m+ 28300 [-]   : {}[0m
[32m+ 28301 [[31mF[0m/[32mT[0m[32m]: if (= obj["Set"] absent) ... else ...[0m
[31m- 28302 [-]   : obj["Set"] = OrdinaryObjectDOTSet[0m
[32m+ 28303 [-]   : {}[0m
[32m+ 28304 [[31mF[0m/[32mT[0m[32m]: if (= obj["SetPrototypeOf"] absent) ... else ...[0m
[31m- 28305 [-]   : obj["SetPrototypeOf"] = OrdinaryObjectDOTSetPrototypeOf[0m
[32m+ 28306 [-]   : {}[0m
[32m+ 28307 [[31mF[0m/[32mT[0m[32m]: if (= obj["Get"] absent) ... else ...[0m
[31m- 28308 [-]   : obj["Get"] = OrdinaryObjectDOTGet[0m
[32m+ 28309 [-]   : {}[0m
[32m+ 28310 [[31mF[0m/[32mT[0m[32m]: if (= obj["PreventExtensions"] absent) ... else ...[0m
[31m- 28311 [-]   : obj["PreventExtensions"] = OrdinaryObjectDOTPreventExtensions[0m
[32m+ 28312 [-]   : {}[0m
[32m+ 28313 [[31mF[0m/[32mT[0m[32m]: if (= obj["Delete"] absent) ... else ...[0m
[31m- 28314 [-]   : obj["Delete"] = OrdinaryObjectDOTDelete[0m
[32m+ 28315 [-]   : {}[0m
[32m+ 28316 [[31mF[0m/[32mT[0m[32m]: if (= obj["GetOwnProperty"] absent) ... else ...[0m
[31m- 28317 [-]   : obj["GetOwnProperty"] = OrdinaryObjectDOTGetOwnProperty[0m
[32m+ 28318 [-]   : {}[0m
[32m+ 28319 [[31mF[0m/[32mT[0m[32m]: if (= obj["OwnPropertyKeys"] absent) ... else ...[0m
[31m- 28320 [-]   : obj["OwnPropertyKeys"] = OrdinaryObjectDOTOwnPropertyKeys[0m
[32m+ 28321 [-]   : {}[0m
[32m+ 28322 [[31mF[0m/[32mT[0m[32m]: if (= obj["GetPrototypeOf"] absent) ... else ...[0m
[31m- 28323 [-]   : obj["GetPrototypeOf"] = OrdinaryObjectDOTGetPrototypeOf[0m
[32m+ 28324 [-]   : {}[0m
[32m+ 28325 [[31mF[0m/[32mT[0m[32m]: if (= obj["IsExtensible"] absent) ... else ...[0m
[31m- 28326 [-]   : obj["IsExtensible"] = OrdinaryObjectDOTIsExtensible[0m
[32m+ 28327 [-]   : {}[0m
[32m+ 28328 [-]   : obj["SubMap"] = (new SubMap("length" -> (new DataProperty("Value" -> argument["length"], "Writable" -> false, "Enumerable" -> false, "Configurable" -> false))))[0m
[32m+ 28329 [-]   : return obj[0m
[32m+ 28330 [[32mT[0m/[32mT[0m[32m]: if (= atype "Symbol") ... else ...[0m
[32m+ 28331 [-]   : { ... }[0m
[32m+ 28332 [-]   : let obj = (new OrdinaryObject("Prototype" -> INTRINSIC_SymbolPrototype, "Extensible" -> true))[0m
[32m+ 28333 [-]   : obj["SymbolData"] = argument[0m
[32m+ 28334 [-]   : obj["SubMap"] = (new SubMap())[0m
[32m+ 28335 [-]   : return obj[0m
[32m+ 28336 [[32mT[0m/[32mT[0m[32m]: if (= atype "BigInt") ... else ...[0m
[32m+ 28337 [-]   : { ... }[0m
[32m+ 28338 [-]   : let obj = (new OrdinaryObject("Prototype" -> INTRINSIC_BigInt["SubMap"]["prototype"]["Value"], "Extensible" -> true))[0m
[32m+ 28339 [-]   : obj["BigIntData"] = argument[0m
[32m+ 28340 [-]   : obj["SubMap"] = (new SubMap())[0m
[32m+ 28341 [-]   : return obj[0m
[32m+ 28342 [-]   : { ... }[0m
[32m+ 28343 [-]   : return argument[0m
