[32mCoalesceExpression0Evaluation0[0m
[32m- Inst: 25 / 25 (100.00%)[0m
[32m- Cond: 10 / 10 (100.00%)[0m
[32m+ 8228  [-]   : { ... }[0m
[32m+ 8229  [-]   : access __x0__ = (CoalesceExpressionHead "Evaluation")[0m
[32m+ 8230  [-]   : let lref = __x0__[0m
[32m+ 8231  [-]   : app __x1__ = (GetValue lref)[0m
[32m+ 8232  [[32mT[0m/[32mT[0m[32m]: if (is-completion __x1__) ... else ...[0m
[32m+ 8233  [[32mT[0m/[32mT[0m[32m]: if (= __x1__["Type"] CONST_normal) ... else ...[0m
[32m+ 8234  [-]   : __x1__ = __x1__["Value"][0m
[32m+ 8235  [-]   : return __x1__[0m
[32m+ 8236  [-]   : {}[0m
[32m+ 8237  [-]   : let lval = __x1__[0m
[32m+ 8238  [[32mT[0m/[32mT[0m[32m]: if (|| (= lval undefined) (= lval null)) ... else ...[0m
[32m+ 8239  [-]   : { ... }[0m
[32m+ 8240  [-]   : access __x2__ = (BitwiseORExpression "Evaluation")[0m
[32m+ 8241  [-]   : let rref = __x2__[0m
[32m+ 8242  [-]   : app __x3__ = (GetValue rref)[0m
[32m+ 8243  [[32mT[0m/[32mT[0m[32m]: if (is-completion __x3__) ... else ...[0m
[32m+ 8244  [[32mT[0m/[32mT[0m[32m]: if (= __x3__["Type"] CONST_normal) ... else ...[0m
[32m+ 8245  [-]   : __x3__ = __x3__["Value"][0m
[32m+ 8246  [-]   : return __x3__[0m
[32m+ 8247  [-]   : {}[0m
[32m+ 8248  [-]   : app __x4__ = (WrapCompletion __x3__)[0m
[32m+ 8249  [-]   : return __x4__[0m
[32m+ 8250  [-]   : { ... }[0m
[32m+ 8251  [-]   : app __x5__ = (WrapCompletion lval)[0m
[32m+ 8252  [-]   : return __x5__[0m
